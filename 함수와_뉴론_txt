{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPJTYEm6OFBXgXWhXP+EJbr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shjiinn/E-Learning/blob/master/%ED%95%A8%EC%88%98%EC%99%80_%EB%89%B4%EB%A1%A0_txt\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 함수와 뉴론"
      ],
      "metadata": {
        "id": "_yYbCdpSzmDV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. 함수와 뉴론\n",
        "- 기계학습 : 만능 함수 제조기\n",
        "\n",
        "2. 뉴론과 신경망\n",
        "- 뉴론\n",
        "  - 뉴론(뇌세포), 뇌의 기본 단위\n",
        "  - 850억개\n",
        "- 뉴론 연산자 \n",
        "  - 임계값\n",
        "  - 입력은 다수, 출력은 하나\n",
        "  - 입력의 합산\n",
        "  - 신경망 구성\n",
        "3. 인공뉴론의 구현\n",
        "- 함수 이름 짓기\n",
        "- 리스트 데이터 만들기(손코딩방식)\n",
        "- 리스트 데이터 '쉽게'만들기(arange)사용\n",
        "  - range(start, end, step)\n",
        "  - linspace(start, end, npoints)\n",
        "- 리스트 comprehension으로 리스트 만들기\n",
        "\n",
        "ex) \n",
        "\n",
        "    y=[]\n",
        "    for mile in range(0,5):\n",
        "        y.append(mileToKm(mile))\n",
        "\n",
        "한줄로 for문 처리 \n",
        "\n",
        "\n",
        "y=[mileToKim(mile) for mile in range(0,5)]\n",
        "\n",
        "- numpy로 데이터 만들기\n",
        "\n",
        "    import numpy as np\n",
        "\n",
        "    x=np.arange(0,5)\n",
        "\n",
        "    y=mileTokm(x)\n",
        "\n",
        "    print(x)\n",
        "\n",
        "    print(y)\n",
        "    \n",
        "    plotMileToKm(x,y)\n"
      ],
      "metadata": {
        "id": "W7D5Vr2Bzyw_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Numpy\n",
        "- 넘파이의 특징\n",
        "  - NumPy - Numerical Python\n",
        "  - 강력한 다차원 배열과 행렬 연산\n",
        "  - 다양한 선형 대수학 함수와 난수\n",
        "  - 간단한 코딩\n",
        "- NumPy 라이브러리 사용법\n",
        "  - import numpy\n",
        "  - import numpy as np\n",
        "- 쉬운 다차원 행렬 연산\n",
        "  - 속도가 빠름\n",
        "- Numpy 배열의 속성\n",
        "  - ndarray(넘파이 클래스) 속성\n",
        "      - ndim : 차원, axis 수, rank\n",
        "      - shape : 형상, 각 차원의 배열의 크기\n",
        "      - size : 배열의 모든 원소의 개수\n",
        "      - dtype : 원소의 자료 형식\n",
        "- 배열의 생성\n",
        "  - 배열 생성\n",
        "      - np.array()-리스트, 튜플 이용\n",
        "      - 배열 생성 함수\n",
        "  - 배열 생성 함수\n",
        "      - zeros 모든 원소 0\n",
        "      - ones 모든 원소 1\n",
        "      - full 사용자가 지정한 하나의 값\n",
        "      - empty 임의의 값\n",
        "      - eye 단위 행렬\n",
        "  - 데이터 생성 함수\n",
        "      - arange([start,]stop[,step,],dtype=None)\n",
        "        start에서 stop미만까지, step간격으로 데이터 생성\n",
        "      - linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)\n",
        "        start부터 stop의 범위에서 num 개의 데이터를 균일한 간격으로 생성\n",
        "      - logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)\n",
        "        start부터 stop의 범위에서 로그 스케일로 num개의 데이터를 생성\n",
        "- 배열 인덱싱과 슬라이싱\n",
        "  -인덱싱\n",
        "    - 0부터 시작\n",
        "    - -1 : 배열의 끝\n",
        "    - : 범위 지정(start:end)\n",
        "  - 슬라이싱 : 서브배열\n",
        "- 배열의 복사\n",
        "  - copy() 메소드 사용\n",
        "- 불린값으로 된 배열\n",
        "  \n"
      ],
      "metadata": {
        "id": "42VMCxp4zmGU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- 브로드캐스팅\n",
        "  - 양방향 브로드캐스팅\n",
        "    - shape(3,1)+shape(1,3)=shape(3,3)\n",
        "  - 3D 브로드캐스팅\n",
        "    - 부족한 부분의 차원을 확장함\n",
        "- 배열의 축(Axis) 다루기\n",
        "  - http://taewan.kim/post/numpy_sum_axis/\n",
        "- 난수 배열의 생성(andint, normal, random)"
      ],
      "metadata": {
        "id": "6dueghB6zmJB"
      }
    }
  ]
}